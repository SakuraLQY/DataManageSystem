package org.jeecg.modules.pay.test;

import java.math.BigDecimal;
import javax.annotation.Resource;
import org.jeecg.JeecgSystemApplication;
import org.jeecg.common.api.vo.SdkResult;
import org.jeecg.common.game.vo.OpSubGameModel;
import org.jeecg.config.sign.context.SdkContext;
import org.jeecg.config.sign.context.SdkInfo;
import org.jeecg.modules.api.ISdkuserApi;
import org.jeecg.modules.pay.dto.OpenDto;
import org.jeecg.modules.pay.entity.OpPayVendor;
import org.jeecg.modules.pay.service.IOpOrderService;
import org.jeecg.modules.pay.service.IOpPlatformCurrencyLogService;
import org.jeecg.modules.pay.service.IOpVendorService;
import org.jeecg.modules.pay.service.ISdkPayService;
import org.jeecg.modules.pay.service.IWechatPayService;
import org.jeecg.modules.pay.vo.OpVendorVo;
import org.jeecg.modules.pay.vo.WechatAppVo;
import org.jeecg.modules.vo.OpUserVo;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Spy;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.util.ReflectionTestUtils;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

/**
 * @author xmh
 * @version V1.0
 * @description: 统一下单
 * @date: 2022/12/26
 **/
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = JeecgSystemApplication.class)
public class OpenTest {

    @Resource
    private ISdkPayService sdkPayService;
    @SpyBean
    private IOpOrderService opOrderService;
    @SpyBean
    private IOpPlatformCurrencyLogService opPlatformCurrencyLogService;
    @Spy
    private ISdkuserApi sdkuserApi;
    @SpyBean
    private IOpVendorService opVendorService;
    @SpyBean
    private IWechatPayService wechatPayService;

    @Before
    public void before() {
        // 初始化
        SdkInfo sdkInfo = new SdkInfo();
        OpSubGameModel opSubGameModel = new OpSubGameModel();
        opSubGameModel.setId(11);
        opSubGameModel.setGameId(1);
        opSubGameModel.setPlatformCurrencySwitch(1);
        opSubGameModel.setPlatformCurrencyDiscount(100);
        sdkInfo.setOpSubGameModel(opSubGameModel);
        SdkContext.setSdkInfo(sdkInfo);
    }

    // 平台币充值
    @Test
    public void test1() {
        OpenDto openDto = new OpenDto();
        openDto.setDealId(0);
        openDto.setSubGameId(22);
        openDto.setOrderType(2);
        openDto.setMmm(BigDecimal.valueOf(6));
        openDto.setUserId(1);
        openDto.setDesc("desc");
        openDto.setDevice("device");
        openDto.setSubGameOrderId("123");
        openDto.setServerId(123);
        openDto.setClientIp("192.168.1.1");
        openDto.setRoleId("101_1");
        openDto.setRoleLevel(10);
        openDto.setSubGameData("123123");
        ReflectionTestUtils.setField(sdkPayService, "sdkuserApi",
            sdkuserApi);
        OpUserVo opUser = new OpUserVo();
        opUser.setUserName("张三");
        doReturn(opUser).when(sdkuserApi).getOpUserVoById(any());
        // 不在黑名单中
        doReturn(false).when(sdkuserApi)
            .checkBlackUser(anyInt(), anyInt(), anyInt(), anyString(), anyString());
        // 订单不重复
        doReturn(null).when(opOrderService).getPkgIdOrder(anyInt(), anyString());
        // 创建订单
        doReturn(true).when(opOrderService).save(any());
        OpVendorVo opVendorVo = new OpVendorVo();
        OpPayVendor opPayVendor = new OpPayVendor();
        opVendorVo.setWxPayVendorData(opPayVendor);
        doReturn(opVendorVo).when(opVendorService).getOpVendorVoById(any());
        // 结果
        WechatAppVo result = new WechatAppVo(false);
        doReturn(result).when(wechatPayService)
            .wechatOpen(anyInt(), anyString(), any(), any(), any());
        Assert.assertEquals(SdkResult.success(result), sdkPayService.wechatAppPay(openDto));
    }

    // 游戏充值，使用平台币支付
    @Test
    public void test2() {
        OpenDto openDto = new OpenDto();
        openDto.setDealId(0);
        openDto.setSubGameId(22);
        openDto.setOrderType(1);
        openDto.setMmm(BigDecimal.valueOf(6));
        openDto.setUserId(1);
        openDto.setDesc("desc");
        openDto.setDevice("device");
        openDto.setSubGameOrderId("123");
        openDto.setServerId(123);
        openDto.setClientIp("192.168.1.1");
        openDto.setRoleId("101_1");
        openDto.setRoleLevel(10);
        openDto.setSubGameData("123123");
        openDto.setUserPassword("123");
        ReflectionTestUtils.setField(sdkPayService, "sdkuserApi",
            sdkuserApi);
        OpUserVo opUser = new OpUserVo();
        opUser.setPlatformCurrency(BigDecimal.valueOf(600));
        opUser.setUserPassword("123");
        doReturn(opUser).when(sdkuserApi).getOpUserVoById(any());
        // 不在黑名单中
        doReturn(false).when(sdkuserApi)
            .checkBlackUser(anyInt(), anyInt(), anyInt(), anyString(), anyString());
        // 订单不重复
        doReturn(null).when(opOrderService).getPkgIdOrder(anyInt(), anyString());
        // 添加平台币扣除记录
        doReturn(true).when(opPlatformCurrencyLogService).save(any());
        // 创建订单
        doReturn(true).when(opOrderService).save(any());
        OpVendorVo opVendorVo = new OpVendorVo();
        doReturn(opVendorVo).when(opVendorService).getOpVendorVoById(any());
        // 扣除用户平台币
        doReturn(true).when(sdkuserApi).updateUserPC(any(), any(), any());
        // 更新游戏订单支付状态
        doReturn(true).when(opOrderService).updateOrderStatus(anyString(), anyInt());
        // 更新平台币扣除记录
        doReturn(true).when(opPlatformCurrencyLogService).updateStatus(anyString(), anyInt());
        // 发货
        doNothing().when(opOrderService).deliverOnce(anyString());

        Assert.assertEquals(SdkResult.success(null), sdkPayService.platformCurrencyPay(openDto));
    }

    // 游戏充值，正常支付
    @Test
    public void test3() {
        OpenDto openDto = new OpenDto();
        openDto.setDealId(0);
        openDto.setSubGameId(22);
        openDto.setOrderType(1);
        openDto.setMmm(BigDecimal.valueOf(6));
        openDto.setUserId(1);
        openDto.setDesc("desc");
        openDto.setDevice("device");
        openDto.setSubGameOrderId("123");
        openDto.setServerId(123);
        openDto.setClientIp("192.168.1.1");
        openDto.setRoleId("101_1");
        openDto.setRoleLevel(10);
        openDto.setSubGameData("123123");
        ReflectionTestUtils.setField(sdkPayService, "sdkuserApi",
            sdkuserApi);
        OpUserVo opUser = new OpUserVo();
        opUser.setUserName("张三");
        doReturn(opUser).when(sdkuserApi).getOpUserVoById(any());
        // 不在黑名单中
        doReturn(false).when(sdkuserApi)
            .checkBlackUser(anyInt(), anyInt(), anyInt(), anyString(), anyString());
        // 订单不重复
        doReturn(null).when(opOrderService).getPkgIdOrder(anyInt(), anyString());
        // 创建订单
        doReturn(true).when(opOrderService).save(any());
        OpVendorVo opVendorVo = new OpVendorVo();
        OpPayVendor opPayVendor = new OpPayVendor();
        opVendorVo.setWxPayVendorData(opPayVendor);
        doReturn(opVendorVo).when(opVendorService).getOpVendorVoById(any());
        // 结果
        WechatAppVo result = new WechatAppVo(false);
        doReturn(result).when(wechatPayService)
            .wechatOpen(anyInt(), anyString(), any(), any(), any());
        Assert.assertEquals(SdkResult.success(result), sdkPayService.wechatAppPay(openDto));
    }

    // 游戏充值，使用平台币抵扣 - 全抵扣
    @Test
    public void test4() {
        OpenDto openDto = new OpenDto();
        openDto.setDealId(0);
        openDto.setSubGameId(22);
        openDto.setOrderType(1);
        openDto.setMmm(BigDecimal.valueOf(6));
        openDto.setUserId(1);
        openDto.setDesc("desc");
        openDto.setDevice("device");
        openDto.setSubGameOrderId("123");
        openDto.setServerId(123);
        openDto.setClientIp("192.168.1.1");
        openDto.setRoleId("101_1");
        openDto.setRoleLevel(10);
        openDto.setSubGameData("123123");
        openDto.setUsePlatformCurrency(1);
        ReflectionTestUtils.setField(sdkPayService, "sdkuserApi",
            sdkuserApi);
        OpUserVo opUser = new OpUserVo();
        opUser.setUserName("张三");
        opUser.setPlatformCurrency(BigDecimal.valueOf(600));
        doReturn(opUser).when(sdkuserApi).getOpUserVoById(any());
        // 不在黑名单中
        doReturn(false).when(sdkuserApi)
            .checkBlackUser(anyInt(), anyInt(), anyInt(), anyString(), anyString());
        // 订单不重复
        doReturn(null).when(opOrderService).getPkgIdOrder(anyInt(), anyString());
        // 创建订单
        doReturn(true).when(opOrderService).save(any());
        // 添加平台币扣除记录
        doReturn(true).when(opPlatformCurrencyLogService).save(any());
        // 扣除用户平台币
        doReturn(true).when(sdkuserApi).updateUserPC(any(), any(), any());
        OpVendorVo opVendorVo = new OpVendorVo();
        doReturn(opVendorVo).when(opVendorService).getOpVendorVoById(any());
        // 更新游戏订单支付状态
        doReturn(true).when(opOrderService).updateOrderStatus(anyString(), anyInt());
        // 更新平台币扣除记录
        doReturn(true).when(opPlatformCurrencyLogService).updateStatus(anyString(), anyInt());
        // 发货
        doNothing().when(opOrderService).deliverOnce(anyString());

        Assert.assertEquals(SdkResult.success(null), sdkPayService.platformCurrencyPay(openDto));
    }

    // 游戏充值，使用平台币抵扣 - 部分抵扣
    @Test
    public void test5() {
        OpenDto openDto = new OpenDto();
        openDto.setDealId(0);
        openDto.setSubGameId(22);
        openDto.setOrderType(1);
        openDto.setMmm(BigDecimal.valueOf(6));
        openDto.setUserId(1);
        openDto.setDesc("desc");
        openDto.setDevice("device");
        openDto.setSubGameOrderId("123");
        openDto.setServerId(123);
        openDto.setClientIp("192.168.1.1");
        openDto.setRoleId("101_1");
        openDto.setRoleLevel(10);
        openDto.setSubGameData("123123");
        openDto.setUsePlatformCurrency(1);
        ReflectionTestUtils.setField(sdkPayService, "sdkuserApi",
            sdkuserApi);
        OpUserVo opUser = new OpUserVo();
        opUser.setUserName("张三");
        opUser.setPlatformCurrency(BigDecimal.valueOf(500));
        doReturn(opUser).when(sdkuserApi).getOpUserVoById(any());
        // 不在黑名单中
        doReturn(false).when(sdkuserApi)
            .checkBlackUser(anyInt(), anyInt(), anyInt(), anyString(), anyString());
        // 订单不重复
        doReturn(null).when(opOrderService).getPkgIdOrder(anyInt(), anyString());
        // 创建订单
        doReturn(true).when(opOrderService).save(any());
        // 添加平台币扣除记录
        doReturn(true).when(opPlatformCurrencyLogService).save(any());
        // 扣除用户平台币
        doReturn(true).when(sdkuserApi).updateUserPC(any(), any(), any());
        OpVendorVo opVendorVo = new OpVendorVo();
        OpPayVendor opPayVendor = new OpPayVendor();
        opVendorVo.setWxPayVendorData(opPayVendor);
        doReturn(opVendorVo).when(opVendorService).getOpVendorVoById(any());
        // 更新平台币扣除记录
        doReturn(true).when(opPlatformCurrencyLogService).updateStatus(anyString(), anyInt());
        // 结果
        WechatAppVo result = new WechatAppVo(false);
        doReturn(result).when(wechatPayService)
            .wechatOpen(anyInt(), anyString(), any(), any(), any());
        Assert.assertEquals(SdkResult.success(result), sdkPayService.wechatAppPay(openDto));
    }
}
